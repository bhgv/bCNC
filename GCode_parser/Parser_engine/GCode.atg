COMPILER GCode

   import re

   other_param = re.compile(r"\s*([A-Za-z_01-9]+)\s*=\s*([\(\)\.\+\-\*\/\^\|\&\!01-9\s]+)$")   

   callback_names = ["eol", "init", "fini", "pragma", "default", "set_param", "get_param",
                      "aux_cmd", "no_callback"]

   gcode_test = True
   
   gcode_callbacks = {}
   gcode_callbacks_keys = []
   
   gcode_params = {}
   
   gcode_out = []
   gcode_out_last = ""
   gcode_out_array_last = []
   
   
   out_type = 0
   
   
   def set_callback_dict(self, callback_dict=None):
      self.gcode_test = False
      
      if callback_dict:
         self.gcode_callbacks = callback_dict
         self.gcode_callbacks_keys = callback_dict.keys()
      else:
         self.gcode_callbacks = {}
         self.gcode_callbacks_keys = []
   
   
   def get_gcode_out(self):
      if len(self.gcode_out_last) > 0:
         self.gcode_out.append(self.gcode_out_last)
         self.gcode_out_last = ""
      out = self.gcode_out
      self.clear_out()
      return out
   
   
   def print_gcode_out(self):
      for ln in self.gcode_out:
         print ln
   
   
   def _int_init(self):
      self.gcode_params = {}
      
      self.gcode_out = []
      self.gcode_out_last = ""
   
   
   def clear_out(self):
      self.gcode_out = []
      self.gcode_out_last = ""
      self.gcode_out_array_last = []


   def clear_params(self):
      self.gcode_params = {}


   def set_out_type_by_line(self):
      self.out_type = 0
       
       
   def set_out_type_by_cmd(self):
      self.out_type = 1
       
       
   def init(self):
      self._int_init()


   def _int_is_callback_defined(self, key):
      return key and key in self.gcode_callbacks_keys and self.gcode_callbacks[key] != None
    
    
   def _int_call(self, Ikey, Iparam1=None, Iparam2=None, Iparam3=None):
      foo = self.gcode_callbacks[Ikey]
      if Ikey == "default":
         key = Iparam1
         param1 = Iparam2
         param2 = Iparam3
      else:
         key = Ikey
         param1 = Iparam1
         param2 = Iparam2
         param3 = Iparam3
         
      if self._int_is_callback_defined("self"):
         callback_self = self.gcode_callbacks["self"]
         if param1 == None:
            #callback_self.foo(key)
            return foo(callback_self, key)
         elif param2 == None:
            return foo(callback_self, key, param1)
         elif param3 == None:
            return foo(callback_self, key, param1, param2)
         else:
            return foo(callback_self, key, param1, param2, param3)
      else:
         if param1 == None:
            return foo(key)
         elif param2 == None:
            return foo(key, param1)
         elif param3 == None:
            return foo(key, param1, param2)
         else:
            return foo(key, param1, param2, param3)
   
   
   def call(self, key, param=None):
      if self._int_is_callback_defined(key):
         out = self._int_call(key, param)
         if out:
            self.gcode_out_last += str(out)
      elif self._int_is_callback_defined("default"):
         out = self._int_call("default", key, param)
         if out:
            self.gcode_out_last += str(out)
      elif self._int_is_callback_defined("no_callback"):
         self._int_call("no_callback", key, param, self.getParsingPos())
      else:
         if key == "eol":
            if self.out_type == 0:
               if len(self.gcode_out_last) > 0:
                  self.gcode_out.append(self.gcode_out_last)
                  self.gcode_out_last = ""
            else:
               if len(self.gcode_out_array_last) > 0:
                  self.gcode_out.append(self.gcode_out_array_last)
                  self.gcode_out_array_last = []
                  
         elif key and key not in self.callback_names:
            if self.out_type == 0:
               self.gcode_out_last += " " + key
               if param:
                  self.gcode_out_last += param
            else:
               line = key
               if param:
                  line += param
               self.gcode_out_array_last.append(line)
               
         elif key == "aux_cmd" and param:
            pat = self.other_param.match(param)
            if pat:
               var_name = pat.group(1)
               var_val_raw = pat.group(2)
               var_val = eval(var_val_raw)
               self.gcode_params[var_name] = str(var_val)


   def set_param(self, key, param=None):
      if self._int_is_callback_defined("set_param"):
         self._int_call("set_param", key, param)
      elif key and param:
         self.gcode_params[key] = param


   def get_param(self, key):
      if self._int_is_callback_defined("get_param"):
         return self._int_call("get_param", key)
      elif key and self.gcode_params[key]:
         return self.gcode_params[key]
      else:
         return 0


IGNORECASE

CHARACTERS
//  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
//  letter = "abcdefghijklmnopqrstuvwxyz".
  digit  = "0123456789".
  eol    = CHR(13) .
  lf     = CHR(10) .
  tab    = CHR(9) .
  nonGcodeCmdBodySym = ANY - eol - lf .
  pragmaChar = ANY - eol - ")" .

TOKENS
  ident  = letter {letter} .
  number = [ "+" | "-" ] ( digit {digit} [ "." {digit} ] | "." digit {digit} ) .
  param  = "#" digit {digit} .
  nonGcodeCmdBody = "%" { nonGcodeCmdBodySym } .
  eolTok = ( eol | lf ) { { tab } ( eol | lf ) } .

PRAGMAS
  option =
        "("
               { pragmaChar }
        ")"
        .                                    (. 
                                                self.call("pragma", self.la.val) 
                                             .)

//COMMENTS FROM '(' TO ')'
COMMENTS FROM ';' TO eol
COMMENTS FROM ';' TO lf

IGNORE tab 



PRODUCTIONS
  GCode =                                    (. 
                                                if self.gcode_test:
                                                   self._int_init()
                                                #self._int_init()
                                                self.call("init") 
                                             .)
        SYNC
        {
            ParamDecl
          |
            NonGcodeCmd
          |
            { GcodeCmd }
            eolTok                           (. self.call("eol") .)
        }
        EOF                                  (. 
                                                self.call("fini")
                                                if self.gcode_test:
                                                   self.print_gcode_out() 
                                             .)
        .
        
  ParamDecl = 
        param                                (. key = self.token.val .)
        "="
        Number<out num>                      (. self.set_param(key, num) .)
        eolTok
        .
        
  NonGcodeCmd =
        nonGcodeCmdBody                      (. self.call("aux_cmd", self.token.val[1:]) .)
        eolTok
        .

  GcodeCmd =                                 (.
                                                cmd = ""
                                                num = ""
                                             .)
        (
            CmdNoMoveAloneLetter<out cmdLetter>    (. cmd = cmdLetter .)
            [
              Number<out num>                (. cmd += num .)
            ]                                (. self.call(cmd) .)
          |
            CmdNoMoveParamLetter<out cmdLetter>    (. cmd = cmdLetter .)
              Number<out num>                (. self.call(cmd, num) .)
          |
            CmdMoveLetter<out cmdLetter>     (. cmd = cmdLetter .)
            Number<out num>                  (. self.call(cmd, num) .)
        )
        .
    
  CmdNoMoveAloneLetter<out cmdLetter> =      (. cmdLetter = "" .)
        (
            "G" | "M" | "T"
        )                                    (. cmdLetter = self.token.val.upper() .)
        .
        
  CmdNoMoveParamLetter<out cmdLetter> =      (. cmdLetter = "" .)
        (
            "S"
          | "F"
          | "P"
          | "D"
          | "E"
          | "H"
          | "L"
          | "N"
          | "O"
        )                                    (. cmdLetter = self.token.val.upper() .)
        .
        
  CmdMoveLetter<out cmdLetter> =            (. cmdLetter = "" .)
        (
            "X" | "Y" | "Z"
          | "A" | "B" | "C"
          | "U" | "V" | "W"
          | "I" | "J" | "K" | "R"
        )                                    (. cmdLetter = self.token.val.upper() .)
        .
        
  Number<out num> =
          number                             (. num =  self.token.val .)
        | param                              (. num = self.get_param(self.token.val) .)
        | "[" ident                          (. num = self.get_param(self.token.val) .)
          "]"
        .
        
END GCode.
